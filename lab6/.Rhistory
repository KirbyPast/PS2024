reprezinta_geometric = function(p, n) {
probabilitati = dgeom(1:n, p)
barplot(probabilitati, names.arg = 1:n, xlab = "k", ylab = "Probabilitate", main = "Repartiția Geometrică")
}
source("F:/PS part2/ex9.R")
source("F:/PS part2/ex9.R")
reprezinta_geometric(10,100)
reprezinta_geometric(1,10)
reprezinta_geometric(10,100)
reprezinta_geometric(10,10)
reprezinta_geometric(5,10)
reprezinta_geometric(5,5)
source("F:/PS part2/ex9.R")
reprezinta_geometric(5,5)
reprezinta_geometric(2,5)
source("F:/PS part2/ex9.R")
source("F:/PS part2/ex9.R")
source("F:/PS part2/ex9.R")
source("F:/PS part2/ex9.R")
source("F:/PS part2/ex9.R")
reprezinta_geometric(0.5,100)
reprezinta_geometric(0.75,100)
reprezinta_geometric(1,100)
reprezinta_geometric(0.1,100)
source("F:/PS part2/ex9.R")
0.1 100
reprezinta_geometric(0.1,100)
source("F:/PS part2/ex10.R")
setwd("F:/PS part2/lab6")
source("F:/PS part2/lab5/temaC.r")
ex_1(2,10)
ex_1(2,10)
ex_1(2,10)
ex_1(2,10)
ex_1(2,10)
source("F:/PS part2/lab5/temaC.r")
source("F:/PS part2/lab5/temaC.r")
source("F:/PS part2/lab5/temaC.r")
source("F:/PS part2/lab5/temaC.r")
source("F:/PS part2/lab5/temaC.r")
generate_bit_strings(10,5)
generate_bit_strings(10,5)
generate_bit_strings(3,5)
source("F:/PS part2/lab5/temaC.r")
generate_bit_strings(3,5)
generate_bit_strings(10,5)
generate_bit_strings(3,5)
randomized_quick_sort(generate_bit_strings(3,5))
generate_sorted_permutation(3,5)
generate_sorted_permutation(3,5)
generate_sorted_permutation(3,5)
generate_sorted_permutation(3,5)
generate_sorted_permutation(3,5)
generate_sorted_permutation(3,5)
generate_sorted_permutation(3,5)
generate_sorted_permutation(10,5)
source("F:/PS part2/lab6/lab6.R")
ex_III_5(date.txt,2)
ex_III_5("date.txt",2)
ex_III_5("date.txt",0.05)
source("F:/PS part2/lab5/temaC.r")
source("F:/PS part2/lab5/temaC.r")
source("F:/PS part2/lab5/temaC.r")
help(replicatE)
help(replicate)
generate_bit_strings <- function(n, k) {
#bit_strings <- replicate(n, paste(sample(c(0, 1), k, replace = TRUE), collapse = ""))
x=character();
for(i in 1:n){
bit_string = sample(c(0,1),k,replace = TRUE)
x[i]=bit_string;
}
print(x)
#print(bit_strings)
}
generate_bit_strings(5,3)
generate_bit_strings <- function(n, k) {
#bit_strings <- replicate(n, paste(sample(c(0, 1), k, replace = TRUE), collapse = ""))
x=character();
for(i in 1:n){
bit_string = sample(c(0,1),k,replace = TRUE)
x=bit_string;
}
print(x)
#print(bit_strings)
}
generate_bit_strings(5,3)
generate_bit_strings(5,3)
generate_bit_strings(5,3)
generate_bit_strings(5,3)
source("F:/PS part2/lab6/lab6.R")
source("F:/PS part2/lab5/temaC.r")
ex_1(5,3)
probabilitati = probabilitati / sum(probabilitati);
ex_1 = function(n, k) {
vals = 1:k;
probabilitati = runif(k);
probabilitati = probabilitati / sum(probabilitati);
print(probabilitati);
x=sample(vals, 1, T, probabilitati);
print(x)
}
generate_permutation = function(n){
U = runif(n,0,1);
permutation = sort(U);
for(i in 1:n){
for(j in 1:n){
if(permutation[i]==U[j]){
permutation[i]=j;
}
}
}
return(permutation);
}
ex_1(5,3)
source("F:/PS part2/lab6/lab6.R")
source("F:/PS part2/lab6/lab6.R")
proportion_test(100,0.63,0.6,0.01,'r')
source("F:/PS part2/lab6/lab6.R")
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(100,0.63,0.6,0.01,'r')
proportion_test(150,20,0.1,0.05,'r')
proportion_test(150,20,0.1,0.05,'l')
proportion_test(150,20,0.1,0.05,'r')
proportion_test(150,20,0.1,0.05,'r')
proportion_test(150,20,0.1,0.05,'r')
proportion_test(150,20,0.1,0.05,'s')
proportion_test(150,20,0.1,0.05,'s')
proportion_test(150,20,0.1,0.05,'r')
source("F:/PS part2/lab6/lab6.R")
source("F:/PS part2/lab6/lab6.R")
source("F:/PS part2/lab6/lab6.R")
source("F:/PS part2/lab6/lab6.R")
ex_1 = function(n, k) {
vals = 1:k;
probabilitati = runif(k);
probabilitati = probabilitati / sum(probabilitati);
print(probabilitati);
x=sample(vals, 1, TRUE, probabilitati);
print(x)
}
ex_III_4 = function(filename, alfa) {
x = scan(filename);
critical_z = -qnorm(alfa / 2);
sample_mean = mean(x);
sigma = sd(x);
n = length(x);
left = sample_mean - critical_z * sigma/sqrt(n);
right = sample_mean + critical_z * sigma/sqrt(n);
print(left)
print(right)
}
ex_III_4(date.txt,0.01)
source("F:/PS part2/lab6/lab6.R")
